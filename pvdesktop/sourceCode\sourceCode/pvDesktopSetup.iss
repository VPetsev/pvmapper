; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{64859F2F-2B43-4134-9820-188E4234975F}
AppName=pvDesktop
AppVersion=0.0.4
AppPublisher=Dr. Ames, Brigham Young University
AppPublisherURL=http://pvdesktop.codeplex.com/
AppSupportURL=http://pvdesktop.codeplex.com/
AppUpdatesURL=http://pvdesktop.codeplex.com/
DefaultDirName={pf}\pvDesktop
DefaultGroupName=pvDesktop
AllowNoIcons=yes
OutputBaseFilename=pvDesktopSetup-0-0-4v2
Compression=lzma
SolidCompression=yes
AppContact=dan.ames@byu.edu

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: ".\Application\PvDesktopMap.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\Application\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\pvDesktop"; Filename: "{app}\PvDesktopMap.exe"
Name: "{group}\{cm:UninstallProgram,pvDesktop}"; Filename: "{uninstallexe}"
Name: "{group}\User Manual"; Filename: "{app}\Documentation\step by step (PvDesktop) 2013-09-16.pdf"
Name: "{commondesktop}\pvDesktop"; Filename: "{app}\PvDesktopMap.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\PvDesktopMap.exe"; Description: "{cm:LaunchProgram,pvDesktop}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{app}\*"

[Code]
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key: string;
    install, release, serviceCount: cardinal;
    check45, success: boolean;
begin
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;


function InstallDotNET(versionDotNET: string; file1: String; file2: String; urlID: String): Boolean;
var
	ExpectedLocalLocation: String;
	ErrorCode: Integer;
begin
  ExtractTemporaryFile(file1);
  ExpectedLocalLocation := ExpandConstant('{tmp}') + '\' + file1;

	if FileExists(ExpectedLocalLocation) then begin
		ShellExec('open', ExpectedLocalLocation, '', '', SW_SHOW, ewNoWait, ErrorCode);
		Result := MsgBox('Ready to continue pvDesktop installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
	end
	else
	begin
		if MsgBox('The .Net Framework ' + versionDotNET + ' is required but was not found.' #13#13 'Open the web page for downloading .Net ' + versionDotNET + ' now?', mbConfirmation, MB_YESNO) = idYes	then
		begin
			ShellExec('open', 'www.microsoft.com/en-us/download/details.aspx?id=' + urlID, '', '', SW_SHOW, ewNoWait, ErrorCode)
			Result := MsgBox('Ready to continue pvDesktop installation?' #13#13 '(Click Yes after installing .Net Framework ' + versionDotNET + ')', mbConfirmation, MB_YESNO) = idYes;
		end;
	end;
end;

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 0 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString = '' then begin
    Result := 1;
  end;
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/NORESTART','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then begin
      Result := 0;
    end else 
      Result := 2;
  end else
    Result := 1;
end;

//Initialize Setup Function
function InitializeSetup(): Boolean;
var
  ErrCode: integer;
  uninstallCode: integer;
begin
    if not IsDotNetDetected('v4.5', 0) then begin
        if MsgBox('pvDesktop requires Microsoft .NET Framework 4.5.'#13#13
            'Would you like to run the installer now?', mbConfirmation, MB_YESNO) = IDYES
        then begin
          InstallDotNET('v4.5', 'dotNetFx45_Full_setup.exe', 'dotNetFx45_Full_setup.exe', '30653');
        end
          result := false;
    end else
        result := true;

    if IsUpgrade() then begin
      uninstallCode := UnInstallOldVersion();
      if not uninstallCode = 0 then begin
        result := false;
      end else
        result := true;
    end;
end;
